// Generated by ts-to-zod
import { z } from "zod";
import { LootTable } from ".";

export const generationQuantitySchema = z.object({
    quantity: z.object({
        min: z.number(),
        max: z.number(),
    }),
});
export const generationCriteriaSchema = z.object({
    criteria: z.object({
        weight: z.number(),
        rolls: z
            .object({
                required: z.number().optional(),
                maximum: z.number().optional(),
            })
            .optional(),
    }),
});

export const lootEntrySchema = z.object({
    type: z.literal("entry"),
    key: z.string(),
});
export const lootItemSchema = z.lazy(() => {
    return z
        .object({
            key: z.string(),
        })
        .merge(generationQuantitySchema)
        .merge(generationCriteriaSchema)
        .and(
            z.union([
                z.object({ type: z.literal("item_id"), id: z.string().nullable() }),
                z
                    .object({ type: z.literal("item_noid"), id: z.never().optional() })
                    .merge(itemSchema),
            ]),
        );
});
export const lootTableSchema: z.ZodType<LootTable> = z.lazy(() => {
    return z
        .object({
            key: z.string(),
        })
        .merge(generationCriteriaSchema)
        .and(
            z.union([
                z.object({ type: z.literal("table_id"), id: z.string().nullable() }),
                z
                    .object({ type: z.literal("table_noid"), id: z.never().optional() })
                    .merge(tableSchema),
            ]),
        ) as z.ZodType<LootTable>;
});

export const customFieldsSchema = z.object({
    custom: z.record(z.unknown()),
});

export const itemSchema = z
    .object({
        name: z.string().optional(),
        sprite: z.string().url().optional(),
        value: z.number(),
    })
    .merge(customFieldsSchema);
export const itemsSchema = z.record(itemSchema);

export const tableSchema = z
    .object({
        name: z.string().optional(),
        loot: z.array(z.union([lootEntrySchema, lootItemSchema, lootTableSchema])),
    })
    .merge(customFieldsSchema);
export const tablesSchema = z.record(tableSchema);

const populatedLootItemSchema = z.any();
export const lootSchema = z.record(
    z.object({
        props: populatedLootItemSchema,
        quantity: z.number(),
    }),
);

export const sortCriterionSchema = z.object({
    name: z.string(),
    selected: z.string(),
    values: z.array(z.string()),
});
export const sortOptionsSchema = z.array(
    z.object({
        name: z.string(),
        criteria: z.array(sortCriterionSchema),
    }),
);
